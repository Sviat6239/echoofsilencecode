using UnityEngine;
using TMPro;

public class PlayerStats : MonoBehaviour
{
    [Header("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–≥—Ä–æ–∫–∞")]
    public float health = 100f;
    public float stamina = 100f;
    public float hunger = 100f;
    public float paranoia = 0f;

    [Header("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è")]
    public float maxHealth = 100f;
    public float maxStamina = 100f;
    public float maxHunger = 100f;
    public float maxParanoia = 100f;

    [Header("–°–∫–æ—Ä–æ—Å—Ç–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")]
    public float staminaRegenRate = 1.5f;    // –°–∫–æ—Ä–æ—Å—Ç—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞–º–∏–Ω—ã
    public float staminaDrainIdle = 0.01f; // –ü–æ—Ç–µ—Ä—è —Å—Ç–∞–º–∏–Ω—ã –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø–æ–∫–æ—è
    public float staminaDrainWalk = 0.05f; // –ü–æ—Ç–µ—Ä—è —Å—Ç–∞–º–∏–Ω—ã –ø—Ä–∏ —Ö–æ–¥—å–±–µ
    public float staminaDrainRun = 0.1f;   // –ü–æ—Ç–µ—Ä—è —Å—Ç–∞–º–∏–Ω—ã –ø—Ä–∏ –±–µ–≥–µ
    public float staminaDrainJump = 0.5f;  // –ü–æ—Ç–µ—Ä—è —Å—Ç–∞–º–∏–Ω—ã –ø—Ä–∏ –ø—Ä—ã–∂–∫–µ
    public float hungerDecayRate = 0.01f;  // –ë–∞–∑–æ–≤–æ–µ —Å–Ω–∏–∂–µ–Ω–∏–µ –≥–æ–ª–æ–¥–∞
    public float healthDecayRate = 0.5f;   // –£—Ä–æ–Ω –æ—Ç –≥–æ–ª–æ–¥–∞

    private bool isRunning = false;
    private bool isJumping = false;
    private bool isMoving = false;

    [Header("–°–≤—è–∑—å —Å UI")]
    public TextMeshProUGUI healthText;
    public TextMeshProUGUI staminaText;
    public TextMeshProUGUI hungerText;
    public TextMeshProUGUI paranoiaText;

    void Update()
    {
        UpdateStamina();
        UpdateHunger();
        UpdateHealth();
        UpdateParanoia();
        UpdateUI();
    }

    void UpdateStamina()
    {
        if (isJumping)
        {
            stamina -= staminaDrainJump * Time.deltaTime;
        }
        else if (isRunning)
        {
            stamina -= staminaDrainRun * Time.deltaTime;
        }
        else if (isMoving)
        {
            stamina -= staminaDrainWalk * Time.deltaTime;
        }
        else
        {
            float regenModifier = hunger < 20f ? 0.3f : 1f; 
            float staminaRegen = staminaRegenRate * regenModifier * Time.deltaTime;

            if (stamina < maxStamina)
            {
                float actualRegen = Mathf.Min(staminaRegen, maxStamina - stamina);
                stamina += actualRegen;
                hunger -= actualRegen / 2f;
            }
        }

        stamina = Mathf.Clamp(stamina, 0f, maxStamina);
    }

    // üîπ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥–æ–ª–æ–¥–∞
    void UpdateHunger()
    {
        hunger -= hungerDecayRate * Time.deltaTime; // –ú–µ–¥–ª–µ–Ω–Ω–æ–µ —Å–Ω–∏–∂–µ–Ω–∏–µ –≥–æ–ª–æ–¥–∞

        hunger = Mathf.Clamp(hunger, 0f, maxHunger);
    }

    // üîπ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–¥–æ—Ä–æ–≤—å—è (–µ—Å–ª–∏ –≥–æ–ª–æ–¥ = 0, —É–º–µ–Ω—å—à–∞–µ—Ç—Å—è –∑–¥–æ—Ä–æ–≤—å–µ)
    void UpdateHealth()
    {
        if (hunger <= 0f)
        {
            health -= healthDecayRate * Time.deltaTime;
        }

        health = Mathf.Clamp(health, 0f, maxHealth);
    }

    // üîπ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–∞–Ω–æ–π–∏
    void UpdateParanoia()
    {
        if (IsInDarkPlace())
            paranoia += 1f * Time.deltaTime;
        else
            paranoia -= 0.5f * Time.deltaTime;

        paranoia = Mathf.Clamp(paranoia, 0f, maxParanoia);
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç—ë–º–Ω–æ–µ –º–µ—Å—Ç–æ
    bool IsInDarkPlace()
    {
        return RenderSettings.ambientIntensity < 0.3f;
    }

    // üîπ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI
    void UpdateUI()
    {
        healthText.text = $"{health:F1}";
        staminaText.text = $"{stamina:F1}";
        hungerText.text = $"{hunger:F1}";
        paranoiaText.text = $"{paranoia:F1}";
    }

    // üîπ –ü–æ–ª—É—á–µ–Ω–∏–µ —É—Ä–æ–Ω–∞
    public void TakeDamage(float amount)
    {
        health -= amount;
        health = Mathf.Clamp(health, 0f, maxHealth);
    }

    // üîπ –î–≤–∏–∂–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞
    public void SetMovement(bool moving)
    {
        isMoving = moving;
    }

    // üîπ –ë–µ–≥ –∏–≥—Ä–æ–∫–∞
    public void SetRunning(bool running)
    {
        isRunning = running;
    }

    // üîπ –ü—Ä—ã–∂–æ–∫ –∏–≥—Ä–æ–∫–∞
    public void SetJumping(bool jumping)
    {
        isJumping = jumping;
    }

    // üîπ –°–º–µ—Ä—Ç—å –∏–≥—Ä–æ–∫–∞
    void Die()
    {
        Debug.Log("–ò–≥—Ä–æ–∫ —É–º–µ—Ä!");
    }
}
